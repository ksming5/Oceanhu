题目描述?
Fibonacci数列是这样定义的：?
F[0] = 0?
F[1] = 1?
for each i ≥ 2: F[i] = F[i-1] + F[i-2]?
因此，Fibonacci数列就形如：0, 1, 1, 2, 3, 5, 8, 13, …，在Fibonacci数列中的数我们称为Fibonacci数。给你一个N，你想让其变为一个Fibonacci数，每一步你可以把当前数字X变为X-1或者X+1，现在给你一个数N求最少需要多少步可以变为Fibonacci数。?
输入描述:?
输入为一个正整数N(1 ≤ N ≤ 1,000,000)?
输出描述:?
输出一个最小的步数变为Fibonacci数”

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Main {
    public static void main(String[] args) throws Exception {


    BufferedReader bf=new BufferedReader(new InputStreamReader(System.in));
    int n=Integer.parseInt(bf.readLine());
    //用fn表示Fibonacci数
    int f0=0,fn=1,temp=0;
    //while循环找到n在两个Fibonacci数之间的范围，直到n>=fn,比较fn-n与n-f0
    while(fn<n){
        temp=f0;
        f0=fn;
        fn=f0+temp;//更新Fibonacci数
    }
    int min=Math.min(fn-n, n-f0);//求出最小步数
    System.out.println(min);
    }
}
